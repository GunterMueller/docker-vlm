#!/usr/bin/env bash
#
# -*- mode: shell; -*-
#
################################################################
#
# This script is meant to be a wrapper around running
# Symbolics VLM under Docker.
#
# See 'dvlm -h' for help.
#
################################################################

function usage() {
    cat <<end-of-message

Usage: dvlm build [-s <dir>] [-g <dir>] [-w <file>]
       dvlm run

      -h         This help.

      -s <dir>   Set directory under which sys.sct can be found.
                 e.g. '-s /home/user/files' if sys.sct is under
                 /home/user/files/sys.sct. If this argument is
                 omitted, the default bundled sys.sct files will be
                 used.

      -g <file>  Set the path to an executable 'genera' on the local
                 host. If this argument is omitted, the default bundled
                 executable will be used instead.

      -w <file>  Run genera with the specified world load file from the host.

EXAMPLE:  dvlm build -s ~/sources/ -g ~/vlm/genera -w ~/worlds/Genera-8-5.vlod
          dvlm run

end-of-message
}

IMAGE="docker-vlm"
CONTAINER="docker-vlm"
SYSSCT=
DOPTS=
WORLD=Genera-8-5-A.vlod
OS='unknown'

unamestr=`uname`

if [[ "$unamestr" == 'Linux' ]] ; then
    platform='linux'
elif [[ "$unamestr" == 'Darwin' ]] ; then
    platform='darwin'
else
    echo "Unknown platform '$unamestr'. Can't run." >&2
    exit 1
fi

CMD=$1; shift

while getopts ":i:s:g:c:l:w:h" opt; do
    case $opt in
        s)
            echo "Will use directory $OPTARG to find sys.sct"
            DOPTS="$DOPTS -v $OPTARG:/var/lib/symbolics:rw"
            ;;
        g)
            dir=`dirname $OPTARG`
            echo "Will use directory $dir to find genera binary"
            DOPTS="$DOPTS -v $dir:/home/genera/bin:rw"
            ;;
        w)
            world=`basename $OPTARG`
            dir=`dirname $OPTARG`
            echo "Will use vload named $world from directory $dir"
            DOPTS="$DOPTS -v $dir:/home/genera/worlds:rw"
            WORLD=$world
            ;;
        h)
            usage
            exit 1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
        :)
            echo "Option -$OPTARG requires an argument" >&2
            ;;
    esac
done

#### Verify that /tmp/.X11-unix exists.

if [[ $platform == 'linux' ]] ; then
    if [ ! -d /tmp/.X11-unix ] ; then
        echo "*** ERROR: Can't find X11 socket directory /tmp/.X11-unix" >&2
        exit 1
    fi
fi

function dobuild {
    #### Verify that a container for the image exists
    local dobuild=0

    if docker ps -a --format="{{.Image}}" | grep -q $IMAGE  ; then
        echo -n "WARNING: Container already exists. Overwrite? [y/n] "
        read yn
        if [ $yn = "y" ] ; then
            docker kill docker-vlm > /dev/null 2>&1
            docker rm docker-vlm > /dev/null 2>&1
            dobuild=1
        fi
    else
        dobuild=1
    fi

    if [ $dobuild -eq 1 ] ; then
        echo "Creating docker container ${CONTAINER}"

        if [ $platform = 'linux' ] ; then
             docker create -ti --privileged -P $DOPTS \
                   -e "DISPLAY" \
                   -e "WORLD=$WORLD" \
                   -v "/tmp/.X11-unix/:/tmp/.X11-unix/:rw" \
                   --name $CONTAINER $IMAGE
        elif [ $platform = 'darwin' ] ; then
              docker create -ti --privileged -P $DOPTS \
                    -e "WORLD=$WORLD" \
                    -p 5901:5901 \
                    --entrypoint /home/genera/run-vnc.sh \
                    --name $CONTAINER $IMAGE
        fi
    fi
}

function dorun() {
    # Make sure an image exists
    if docker ps -a --format="{{.Image}}" | grep -q $IMAGE  ; then
        docker start -ai $CONTAINER
    else
        echo "No container found. Run 'dvlm build' first." >&2
    fi
}

if [ "$CMD" = 'run' ] ; then
    dorun
elif [ "$CMD" = 'build' ] ; then
    dobuild
else
    usage
    exit 1
fi
